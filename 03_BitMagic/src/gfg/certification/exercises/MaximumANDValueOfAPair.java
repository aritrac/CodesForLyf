package gfg.certification.exercises;

/**
 * Given an array arr[] of N positive elements. The task is to find the Maximum AND Value generated by any pair of
 * element from the array.
 * Note: AND is bitwise '&' operator.
 *
 *
 * Example 1:
 * Input:
 * N = 4
 * arr[] = {4, 8, 12, 16}
 * Output: 8
 * Explanation:
 * Pair (8,12) has the Maximum AND Value 8.
 *
 * Example 2:
 * Input:
 * N = 4
 * arr[] = {4, 8, 16, 2}
 * Output: 0
 * Explanation: Maximum AND Value is 0.
 *
 * Your Task: The task is to complete the function maxAND() which takes the array elements and N (size of the array)
 * as input parameters and returns the maximum AND value generated by any pair in the array.
 *
 * Expected Time Complexity: O(N * log M), where M is the maximum element of the array.
 * Expected Auxiliary Space: O(1).
 *
 * Constraints:
 * 1 <= N <= 10^5
 * 1 <= arr[i] <= 10^5
 */
public class MaximumANDValueOfAPair {
    public static void main(String[] args) {
        int[] arr = {4,8,16,2};
        int n = 4;
        System.out.println("Maximum AND Value = " + maxANDEfficient(arr,n));
        int[] arr2 = {4,8,12,16};
        n = 4;
        System.out.println("Maximum AND Value = " + maxANDEfficient(arr2,n));
    }

    public static int maxAND(int[] arr, int n){
        int res = 0;
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                res = res > (arr[i] & arr[j]) ? res : (arr[i] & arr[j]);
            }
        }
        return res;
    }

    public static int maxANDEfficient(int[] arr, int n){
        int res = 0;
        int count = 0;
        for(int i = 31; i >= 0; i--){
            count = countPattern(res | (1 << i), arr,n);
            if(count >= 2)
                res = res | (1 << i);
        }
        return res;
    }

    public static int countPattern(int pattern, int[] arr, int n){
        int count = 0;
        for(int i = 0; i < n; i++){
            if((pattern & arr[i]) == pattern){
                count++;
            }
        }
        return count;
    }
}
